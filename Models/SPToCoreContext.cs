

using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading.Tasks;
///
/// generated by SPToCore on 03/11/2021 14:53:59
///
namespace Pharmacy.Models
{
    public partial class SPToCoreContext : PharmacyContext
    {

        private DbSet<spStoreSupplierOrderHeaderResult> spStoreSupplierOrderHeader { get; set; }

        private DbSet<spViewStoreSupplierOrdersResult> SpViewStoreSupplierOrders { get; set; }


        public SPToCoreContext()
        {
        }

        public SPToCoreContext(DbContextOptions<PharmacyContext> options)
            : base(options)
        {
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            // No key            

            modelBuilder.Entity<spStoreSupplierOrderHeaderResult>().HasNoKey();

            modelBuilder.Entity<spViewStoreSupplierOrdersResult>().HasNoKey();

            //Thanks Valecass!!!
            base.OnModelCreating(modelBuilder);
        }


        public void SpErrorLogInsert(string Source, string Module, int? ErrorNumber, string Description)
        {



            // Parameters

            SqlParameter p_Source = new SqlParameter("@Source", Source ?? (object)DBNull.Value);
            p_Source.Direction = ParameterDirection.Input;
            p_Source.DbType = DbType.String;
            p_Source.Size = 255;


            SqlParameter p_Module = new SqlParameter("@Module", Module ?? (object)DBNull.Value);
            p_Module.Direction = ParameterDirection.Input;
            p_Module.DbType = DbType.String;
            p_Module.Size = 255;


            SqlParameter p_ErrorNumber = new SqlParameter("@ErrorNumber", ErrorNumber ?? (object)DBNull.Value);
            p_ErrorNumber.Direction = ParameterDirection.Input;
            p_ErrorNumber.DbType = DbType.Int32;
            p_ErrorNumber.Size = 4;


            SqlParameter p_Description = new SqlParameter("@Description", Description ?? (object)DBNull.Value);
            p_Description.Direction = ParameterDirection.Input;
            p_Description.DbType = DbType.String;
            p_Description.Size = 5000;



            // Processing 
            string sqlQuery = $@"EXEC [dbo].[spErrorLogInsert] @Source, @Module, @ErrorNumber, @Description";

            //Execution
            this.Database.ExecuteSqlRaw(sqlQuery, p_Source, p_Module, p_ErrorNumber, p_Description);



            //Return

        }


        public async Task<List<spStoreSupplierOrderHeaderResult>> spStoreSupplierOrderHeaderAsync(string Ordernumber, string OrderStatusId)
        {

            //Initialize Result 
            List<spStoreSupplierOrderHeaderResult> lst = new List<spStoreSupplierOrderHeaderResult>();



            // Parameters

            SqlParameter p_Ordernumber = new SqlParameter("@Ordernumber", Ordernumber ?? (object)DBNull.Value);
            p_Ordernumber.Direction = ParameterDirection.Input;
            p_Ordernumber.DbType = DbType.String;
            p_Ordernumber.Size = 200;


            SqlParameter p_OrderStatusId = new SqlParameter("@OrderStatusId", OrderStatusId ?? (object)DBNull.Value);
            p_OrderStatusId.Direction = ParameterDirection.Input;
            p_OrderStatusId.DbType = DbType.String;
            p_OrderStatusId.Size = 100;



            // Processing 
            string sqlQuery = $@"EXEC [dbo].[spStoreSupplierOrderHeader] @Ordernumber, @OrderStatusId";


            //Output Data
            lst = await this.spStoreSupplierOrderHeader.FromSqlRaw(sqlQuery, p_Ordernumber, p_OrderStatusId).ToListAsync();



            //Return

            return lst;

        }


        public async Task<List<spViewStoreSupplierOrdersResult>> spViewStoreSupplierOrdersAsync(string Ordernumber, int? SupplierId)
        {

            //Initialize Result 
            List<spViewStoreSupplierOrdersResult> lst = new List<spViewStoreSupplierOrdersResult>();



            // Parameters

            SqlParameter p_Ordernumber = new SqlParameter("@Ordernumber", Ordernumber ?? (object)DBNull.Value);
            p_Ordernumber.Direction = ParameterDirection.Input;
            p_Ordernumber.DbType = DbType.String;
            p_Ordernumber.Size = 200;


            SqlParameter p_SupplierId = new SqlParameter("@SupplierId", SupplierId ?? (object)DBNull.Value);
            p_SupplierId.Direction = ParameterDirection.Input;
            p_SupplierId.DbType = DbType.Int32;
            p_SupplierId.Size = 4;



            // Processing 
            string sqlQuery = $@"EXEC [dbo].[spViewStoreSupplierOrders] @Ordernumber, @SupplierId";


            //Output Data
            lst = await this.SpViewStoreSupplierOrders.FromSqlRaw(sqlQuery, p_Ordernumber, p_SupplierId).ToListAsync();



            //Return

            return lst;

        }




    }

    public class spStoreSupplierOrderHeaderResult
    {

        public string OrderNumber { get; set; }

        public int? SupplierId { get; set; }

        public string SupplierDescription { get; set; }

        public DateTime? OrderDate { get; set; }

        public int? Order_Status { get; set; }

        public string Status_Description { get; set; }

        public bool? SubmitOrder { get; set; }

        public bool? ConfirmSubmission { get; set; }

        public bool? StockConfirm { get; set; }

        public string OrderCreatedBy { get; set; }

        public string OrderConfirmedBy { get; set; }

        public DateTime? DateConfirmed { get; set; }

        public string StockRecievedBy { get; set; }

        public DateTime? DateReceived { get; set; }

        public string StockComfirmedBy { get; set; }

        public DateTime? StockConfirmationDate { get; set; }

    }


    public class spViewStoreSupplierOrdersResult
    {

        public string ItemId { get; set; }

        public string OrderNumber { get; set; }

        public double ProductCode { get; set; }

        public string ProductDescription { get; set; }

        public int? CategoryId { get; set; }

        public string CategoryDescription { get; set; }

        public int? BasicUnitId { get; set; }

        public string BasicUnitDescription { get; set; }

        public int? ProductClassificationId { get; set; }

        public string ClassificationDesc { get; set; }

        public double? PackSize { get; set; }

        public double? RemainingStock { get; set; }

        public double? QuantityOrderd { get; set; }

        public double? QuantityRecieved { get; set; }

        public double? TotalQuantity { get; set; }

        public double? ListPrice { get; set; }

        public double? TotalPrice { get; set; }

    }


}