// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Pharmacy.Pages.Ordering
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\CoreProjects\Pharmacy\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Pharmacy;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Pharmacy.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\CoreProjects\Pharmacy\_Imports.razor"
using BlazorStrap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CoreProjects\Pharmacy\Pages\Ordering\ProductWastagePage.razor"
using Pharmacy.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CoreProjects\Pharmacy\Pages\Ordering\ProductWastagePage.razor"
using System.Collections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CoreProjects\Pharmacy\Pages\Ordering\ProductWastagePage.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CoreProjects\Pharmacy\Pages\Ordering\ProductWastagePage.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CoreProjects\Pharmacy\Pages\Ordering\ProductWastagePage.razor"
using Pharmacy.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Ordering/ProductWastage")]
    public partial class ProductWastagePage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 146 "D:\CoreProjects\Pharmacy\Pages\Ordering\ProductWastagePage.razor"
       
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters
    public string[] GroupedColumns = new string[] { "WastageDate" };
    private SfGrid<ProductWastage> DefaultGrid;
    private List<ViewProduct> Product { get; set; }
    private List<AbasicUnit> basicUnit { get; set; }
    private List<ViewBatchNo> BatchNo { get; set; }
    private ProductWastage PhysicalcountData { get; set; }
    #region Header DataSource
    public class ProductWastageAdapter : DataAdaptor
    {
        public IToastService toastService;
        private UserManagement _userManagement;
        public ProductWastageAdapter(IToastService ts, UserManagement userManagement)
        {
            _userManagement = userManagement;
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<ProductWastage>();
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.ProductWastages.OrderByDescending(o => o.WastageDate).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<ProductWastage>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    var val = (value as ProductWastage);
                    ProductWastage order = new ProductWastage();
                    order.WastageId = Guid.NewGuid().ToString();
                    order.WastageDate = val.WastageDate;
                    order.ProductCode = val.ProductCode;
                    order.BatchNo = val.BatchNo;
                    order.Quantity = val.Quantity;
                    order.WastageReason = val.WastageReason;
                    order.WastedBy = _userManagement.GetStaffId();
                    order.BasicUnitId = val.BasicUnitId;
                    var expiry = dbContext.SupplierOrderBatchDetails.FirstOrDefault(o => o.BatchNo == val.BatchNo);
                    if(expiry != null) {
                        order.ExpiryDate = expiry.ExpiryDate;
                    }

                    dbContext.ProductWastages.Add(order);
                    await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                var val = (value as ProductWastage);
                using (var dbContext = new SPToCoreContext())
                {
                    dbContext.ProductWastages.Remove(dbContext.ProductWastages.FirstOrDefault(o => o.WastageId == val.WastageId));
                    await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    var val = (value as ProductWastage);
                    var exist = dbContext.ProductWastages.FirstOrDefault(o => o.WastageId == val.WastageId && o.ProductCode == val.ProductCode && o.BatchNo == val.BatchNo);
                    if (exist != null)
                    {
                        //exist.ExpiryDate = val.ExpiryDate;
                        exist.Quantity = val.Quantity;
                        exist.WastageReason = val.WastageReason;
                        //exist.SystemCount = val.SystemCount;
                        exist.BasicUnitId =val.BasicUnitId;

                        dbContext.Entry(exist).State = EntityState.Modified;
                        await dbContext.SaveChangesAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            return value;
        }
    }
    public void OnActionBegin(ActionEventArgs<ProductWastage> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {
            args.RowData.WastageId = Guid.NewGuid().ToString();
            args.RowData.WastageDate = DateTime.Now.Date;
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        //if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        //{
        //    this.OrderGrid.EndEdit();
        //}
    }
    public void OnProductChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<double, ViewProduct> args)
    {
        double val = Convert.ToDouble(args.Value);

        BatchNo = context.ViewBatchNos.Where(o => o.ProductCode == val).ToList();
    }
    #endregion Header DataSource
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("Account/LoginPage", true);
            }
            Product = context.ViewProducts.ToList();
            BatchNo = context.ViewBatchNos.ToList();
            basicUnit = context.AbasicUnits.ToList();
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManagement userManagement { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Navigation { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PharmacyContext context { get; set; }
    }
}
#pragma warning restore 1591
