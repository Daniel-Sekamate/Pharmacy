// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Pharmacy.Pages.Sales
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\CoreProjects\Pharmacy\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Pharmacy;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Pharmacy.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\CoreProjects\Pharmacy\_Imports.razor"
using BlazorStrap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CoreProjects\Pharmacy\Pages\Sales\PosPage.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CoreProjects\Pharmacy\Pages\Sales\PosPage.razor"
using Pharmacy.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CoreProjects\Pharmacy\Pages\Sales\PosPage.razor"
using Pharmacy.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CoreProjects\Pharmacy\Pages\Sales\PosPage.razor"
using System.Collections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CoreProjects\Pharmacy\Pages\Sales\PosPage.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CoreProjects\Pharmacy\Pages\Sales\PosPage.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Sales/PosOrders")]
    public partial class PosPage : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 250 "D:\CoreProjects\Pharmacy\Pages\Sales\PosPage.razor"
       
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    SfToast CancelToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    private PosOrdersHeader orderHeader { get; set; }
    private SfGrid<PosOrdersHeader> OrdersHeaderGrid;
    private SfGrid<PosorderDetail> OrderGrid;
    public Query ChildQuery = new Query();
    public string DeletedOrders { get; set; }
    private List<ViewAvailableProduct> Product { get; set; }
    private List<AOrderStatus> OrderStatus { get; set; }
    private List<AbasicUnit> basicUnit { get; set; }
    private List<ViewAvailableBatch2> BatchNo { get; set; }
    public bool EnableDatchDropDown = false;
    public Query BatchQuery { get; set; } = null;
    public Syncfusion.Blazor.Grids.Action PreviousAction;

    protected override async Task OnInitializedAsync()
    {
        if (!userManagement.IsSignedIn())
        {
            Navigation.NavigateTo("Account/LoginPage", true);
        }
        Product = _context.ViewAvailableProducts.ToList();
        OrderStatus = _context.AOrderStatuses.Where(o=> o.OrderStatus ==6|| o.OrderStatus == 7 || o.OrderStatus == 8 || o.OrderStatus == 1).ToList();
        basicUnit = _context.AbasicUnits.ToList();
        BatchNo = _context.ViewAvailableBatch2s.ToList();
    }

    private async void OnDeleteRecord()
    {
        try
        {

            DeletedOrders = string.Empty;
            var selected = OrderGrid.SelectedRecords;
            if (selected.Count == 0)
            {
                await ToastObj.Show(new ToastModel { Title = "Information!", Content = "Please select atleast one record to delete.", CssClass = "e-toast-info", Icon = "e-info toast-icons" });
            }
            else
            {
                foreach (var n in selected)
                {
                    if (n.ProductCode != 0)
                    {
                        var product = _context.Aproducts.FirstOrDefault(o => o.ProductCode == n.ProductCode);
                        DeletedOrders += product.ProductDescription + ",";
                    }
                }
                if (!string.IsNullOrEmpty(DeletedOrders))
                {
                    await this.DeleteToastObj.Show();
                }
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private async void DeleteYesBtnclick()
    {
        try
        {
            var selectedRecords = OrderGrid.SelectedRecords;
            if (selectedRecords.Count == 0)
            {
                await this.ToastObj.Show(new ToastModel { Title = "Information!", Content = "Please select atleast on record to Delete", CssClass = "e-toast-info", Icon = "e-info toast-icons" });
                await this.DeleteToastObj.Hide();
            }
            else
            {
                string ordernumbers = string.Empty;
                foreach (var n in selectedRecords)
                {
                    ordernumbers += n.SaleId + ",";
                    var exist = _context.PosorderDetails.FirstOrDefault(o => o.SaleId == n.SaleId && o.ProductCode == n.ProductCode);
                    if (exist != null)
                    {
                        _context.PosorderDetails.Remove(exist);
                        await _context.SaveChangesAsync();
                    }
                }
                OrderGrid.Refresh();
                await this.ToastObj.Show(new ToastModel { Title = "Success!", Content = "The following Products:- " + ordernumbers + " have been successfully Deleted From the order", CssClass = "e-toast-success", Icon = "e-success toast-icons" });
                await this.DeleteToastObj.Hide();
            }
        }
        catch (Exception ex)
        {

            await this.ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
            await this.DeleteToastObj.Hide();
        }
    }
    private async void DeleteNoBtnclick()
    {
        try
        {
            await this.DeleteToastObj.Hide();
        }
        catch (Exception ex)
        {

            await this.ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private void OnAmountPaidChange()
    {
        var balance = orderHeader.AmountPaid - orderHeader.TotalCost;
        orderHeader.Balance = balance;
    }
    #region Order Header
    public class POSOrderHeaderAdapter : DataAdaptor
    {
        public IToastService toastService;
        //private SupplierPdf exportService;
        private UserManagement userManagement;
        private Microsoft.JSInterop.IJSRuntime JS;
        public POSOrderHeaderAdapter(IToastService ts, Microsoft.JSInterop.IJSRuntime js, /*SupplierPdf pdf,*/ UserManagement _userManagement)
        {
            toastService = ts;
            JS = js;
            //exportService = pdf;
            userManagement = _userManagement;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            try
            {
                var data = new List<PosOrdersHeader>();
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.PosOrdersHeaders.Where(o => o.OrderStatusId == 7 || o.OrderStatusId == 8 || o.OrderStatusId == 1).ToListAsync();
                }
                IEnumerable GridData = data;
                int _count = data.Count;
                if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
                {
                    // Searching
                    GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
                }
                if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
                {
                    GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
                }
                if (dataManagerRequest.Skip != 0)
                {
                    GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
                }
                if (dataManagerRequest.Take != 0)
                {
                    GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
                }
                IDictionary<string, object> aggregates = new Dictionary<string, object>();
                if (dataManagerRequest.Aggregates != null) // Aggregation
                {
                    aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
                }
                if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
                {
                    foreach (var group in dataManagerRequest.Group)
                    {
                        GridData = DataUtil.Group<PosOrdersHeader>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                    }
                }
                return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
                return null;
            }
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    int? previousvalue = 0;
                    var val = (value as PosOrdersHeader);
                    var exist = dbContext.PosOrdersHeaders.FirstOrDefault(o => o.SaleId == val.SaleId);
                    if (exist != null)
                    {
                        //exist.ProductCode =val.ProductCode;
                        exist.OrderDate = val.OrderDate;
                        exist.Buyer = val.Buyer;
                        exist.OrderStatusId = val.OrderStatusId;
                        exist.TotalCost = val.TotalCost;
                        exist.Balance = val.Balance;
                        exist.AmountPaid = val.AmountPaid;

                        dbContext.Entry(exist).State = EntityState.Modified;

                        await dbContext.SaveChangesAsync();
                    }
                    else
                    {
                        dbContext.PosOrdersHeaders.Add(val);

                        await dbContext.SaveChangesAsync();
                    }

                    toastService.ShowSuccess("Order Saved successfully");

                    //if (previousvalue == false && val.OrderConfirmed == true)
                    //{
                    //    using (MemoryStream excelStream = await exportService.StoreWarehouseOrderPDF(val.OrderNumber, val.SupplierId))
                    //    {
                    //        await JS.SaveAs("New Order.pdf", excelStream.ToArray());
                    //    }
                    //}
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }


            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {

            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }
            //int data = (int)value;
            //var val = (value as SupplierOrderHeader);
            //using (var dbContext = new SPToCoreContext())
            //{
            //    dbContext.SupplierOrderHeader.Remove(dbContext.SupplierOrderHeader.FirstOrDefault(o => o.FacilityCode == val.FacilityCode && o.ProductCode == val.ProductCode && o.BatchNo == val.BatchNo && o.DateOfPhysicalCount == val.DateOfPhysicalCount));
            //    await dbContext.SaveChangesAsync();
            //}

            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    var val = (value as PosOrdersHeader);
                    var exist = dbContext.PosOrdersHeaders.FirstOrDefault(o => o.SaleId == val.SaleId);
                    if (exist != null)
                    {
                        //exist.ProductCode =val.ProductCode;
                        exist.OrderDate = val.OrderDate;
                        exist.Buyer = val.Buyer;
                        exist.OrderStatusId = val.OrderStatusId;
                        exist.TotalCost = val.TotalCost;
                        exist.Balance = val.Balance;
                        exist.AmountPaid = val.AmountPaid;

                        dbContext.Entry(exist).State = EntityState.Modified;

                        await dbContext.SaveChangesAsync();

                        toastService.ShowSuccess("Order Saved successfully");
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }


            return value;
        }
    }
    public async void OnActionBegin(ActionEventArgs<PosOrdersHeader> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                BatchNo = _context.ViewAvailableBatch2s.ToList();
                PreviousAction = args.RequestType;
                ChildQuery = new Query().AddParams("OrderNumber", args.RowData.SaleId);

            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                BatchNo = _context.ViewAvailableBatch2s.Where(o=> o.RemainingBatchQuantity>0 && MonthDifference(o.ExpiryDate.Value,DateTime.Now)>6).ToList();
                Product = _context.ViewAvailableProducts.ToList();
                PreviousAction = args.RequestType;
                using (var dbContext = new SPToCoreContext())
                {
                    double? daycode = 1;
                    var data = dbContext.PosOrdersHeaders.Where(o => o.OrderDate.Value.Date == DateTime.Now.Date).ToList();
                    if (data.Count > 0)
                    {
                        daycode = (data.Count + 1);
                    }
                    DateTime date = DateTime.Now;
                    args.RowData.SaleId = Guid.NewGuid().ToString();
                    args.RowData.OrderDate = DateTime.Now;
                    //orderHeader.DayOrderCode = daycode;
                    args.RowData.OrderStatusId = 1;
                    args.RowData.CreatedBy = userManagement.GetStaffId();
                    dbContext.PosOrdersHeaders.Add(args.RowData);
                    await dbContext.SaveChangesAsync();

                    ChildQuery = new Query().AddParams("OrderNumber", args.RowData.SaleId);
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {
                if (PreviousAction == Syncfusion.Blazor.Grids.Action.Add)
                {
                    using (var dbContext = new SPToCoreContext())
                    {
                        var exist = await dbContext.PosorderDetails.Where(o => o.SaleId == args.Data.SaleId).ToListAsync();
                        if (exist.Count == 0)
                        {
                            var data = dbContext.PosOrdersHeaders.FirstOrDefault(o => o.SaleId == args.Data.SaleId);

                            if (data != null)
                            {
                                dbContext.PosOrdersHeaders.Remove(data);
                                await dbContext.SaveChangesAsync();
                            }
                        }
                    }
                }
            }
            if(args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            {
                await this.OrderGrid.EndEdit();
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }

    }
    public int MonthDifference(DateTime startdate, DateTime enddate)
    {
        return (startdate.Month - enddate.Month) + 12 * (startdate.Year - enddate.Year);
    }
    #endregion Order Header

    #region Order Details
    public class OrderPOSDetailAdapter : DataAdaptor
    {
        public IToastService toastService;
        public OrderPOSDetailAdapter(IToastService ts)
        {
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            string OrderNumber = null;
            if (dataManagerRequest.Params != null && dataManagerRequest.Params.Count > 0)
            {
                var val = dataManagerRequest.Params.Values;
                OrderNumber = val.SingleOrDefault().ToString();
            }

            var data = new List<PosorderDetail>();
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.PosorderDetails.Where(o => o.SaleId == OrderNumber).ToListAsync();
                }
                for (int i = 1; i <= 15; i++)
                {
                    data.Add(new PosorderDetail() { SaleId = OrderNumber });
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<PosorderDetail>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        // Performs BatchUpdate operation
        public override object BatchUpdate(DataManager dm, object Changed, object Added, object Deleted, string KeyField, string Key, int? dropIndex)
        {
            object value = null;
            try
            {
                if (Added != null)
                {
                    var val = (List<PosorderDetail>)Added;
                    if (val.Count > 0)
                    {
                        Changed = Added;
                        value = Added;
                    }
                    //foreach (var rec in (IEnumerable<Order>)Added)
                    //{
                    //    Orders.Add(rec);
                    //}

                }
                if (Changed != null)
                {
                    value = Changed;

                    using (var dbContext = new SPToCoreContext())
                    {
                        var val = (List<PosorderDetail>)Changed;
                        foreach (var n in val)
                        {
                            var product = dbContext.Aproducts.FirstOrDefault(o => o.ProductCode == n.ProductCode);
                            var exists = dbContext.PosorderDetails.FirstOrDefault(o => o.SaleId == n.SaleId && o.ProductCode == n.ProductCode);
                            if (exists != null)
                            {
                                exists.Quantity = n.Quantity;
                                exists.SellPrice = n.SellPrice;
                                exists.BasicUnitId = n.BasicUnitId;
                                exists.BatchNo = n.BatchNo;
                                exists.TotalPrice = 0;
                                if (n.Quantity != null && !double.IsNaN(Convert.ToDouble(n.Quantity)))
                                {
                                    exists.SellPrice = product.RetailPrice;
                                    exists.TotalPrice = (n.SellPrice * n.Quantity);
                                    if(n.BasicUnitId != null && n.BasicUnitId != product.BasicUnitId)
                                    {
                                        var price = (product.RetailPrice / product.PackSize);
                                        exists.SellPrice = price;
                                        exists.TotalPrice = (price * n.Quantity);
                                    }
                                }
                                dbContext.Entry(exists).State = EntityState.Modified;
                                //dbContext.SaveChanges();
                            }
                            else
                            {
                                n.Quantity = 1;
                                PosorderDetail details = new PosorderDetail();
                                details.ItemId = Guid.NewGuid().ToString();
                                details.SaleId = n.SaleId;
                                details.ProductCode = n.ProductCode;
                                details.Quantity = n.Quantity;
                                details.BasicUnitId = n.BasicUnitId;
                                details.BatchNo = n.BatchNo;
                                details.TotalPrice = 0;
                                details.SellPrice = product.RetailPrice;
                                if (n.Quantity != null && !double.IsNaN(Convert.ToDouble(n.Quantity)))
                                {
                                    details.TotalPrice = (details.SellPrice * n.Quantity);

                                    if (n.BasicUnitId != null && n.BasicUnitId != product.BasicUnitId)
                                    {
                                        var price = (product.RetailPrice / product.PackSize);
                                        details.SellPrice = price;
                                        details.TotalPrice = (price * n.Quantity);
                                    }
                                }
                                dbContext.PosorderDetails.Add(details);
                            }
                            dbContext.SaveChanges();
                        }
                    }



                }
                if (Deleted != null)
                {
                    //foreach (var rec in (IEnumerable<Order>)Deleted)
                    //{
                    //    Orders.Remove(Orders.Where(or => or.OrderID == rec.OrderID).FirstOrDefault());
                    //}

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            return value;
        }

    }
    public void OnCellSaved()
    {
        this.OrderGrid.EndEdit();
    }
    public void PosActionComplete(ActionEventArgs<PosorderDetail> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BatchSave)
        {
            var data = (OrderGrid.CurrentViewData as List<PosorderDetail>);
            var sum = data.Where(o => o.TotalPrice != null).Sum(o => o.TotalPrice);
            orderHeader.TotalCost = sum;
        }
    }
    public async Task OrderCellEditHandler(CellEditArgs<PosorderDetail> args)
    {
        if(args.ColumnName== "BatchNo")
        {
            if (args.RowData.ProductCode == 0)
            {
                await ToastObj.Show(new ToastModel { Title = "Warning!", Content = "Please select the product first.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
                EnableDatchDropDown = false;
            }
            else
            {
                EnableDatchDropDown = true;
                this.BatchQuery = new Query().Where(new WhereFilter() { Field = "ProductCode", Operator = "equal", value = args.RowData.ProductCode, IgnoreCase = false, IgnoreAccent = false });
            }
        }
        if (args.ColumnName == "Quantity")
        {
            if (args.RowData.ProductCode == 0)
            {
                await ToastObj.Show(new ToastModel { Title = "Warning!", Content = "Please select the product first.", CssClass = "e-toast-warning", Icon = "e-warning toast-icons" });
                args.Cancel = true;
            }
        }
    }
    public async Task CellSelectHandler(CellSelectEventArgs<PosorderDetail> args)
    {
        //get selected cell index
        var CellIndexes = await OrderGrid.GetSelectedRowCellIndexes();

        //get the row and cell index
        var CurrentEditRowIndex = CellIndexes[0].Item1;
        var CurrentEditCellIndex = (int)CellIndexes[0].Item2;

        //get the available fields
        var fields = await OrderGrid.GetColumnFieldNames();
        // edit the selected cell using the cell index and column name
        await OrderGrid.EditCell(CurrentEditRowIndex, fields[CurrentEditCellIndex]);
    }
    public void ChangeProduct(Syncfusion.Blazor.DropDowns.ChangeEventArgs<double, ViewAvailableProduct> args)
    {
        this.EnableDatchDropDown = true;
        this.BatchQuery = new Query().Where(new WhereFilter() { Field = "ProductCode", Operator = "equal", value = args.Value, IgnoreCase = false, IgnoreAccent = false });
        //this.DistrictValue = null;
    }
    public async void PosActionBeginHandler(ActionEventArgs<PosorderDetail> Args)
    {
        var data = Args.Data;
        if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {

        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            //Show the Grid Column in Grid and Dialog Template
            this.EnableDatchDropDown = true;
            this.BatchQuery = new Query().Where(new WhereFilter() { Field = "ProductCode", Operator = "equal", value = Args.RowData.ProductCode, IgnoreCase = false, IgnoreAccent = false });
        }
        else if (Args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            if (data.ProductCode == 0)
            {
                await this.ToastObj.Show(new ToastModel { Title = "Error!", Content = "Please Choose a Product!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                Args.Cancel = true;
            }
            else if (string.IsNullOrEmpty(data.BatchNo))
            {
                await this.ToastObj.Show(new ToastModel { Title = "Error!", Content = "Please Choose a Batch number!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                Args.Cancel = true;
            }
            else if (data.BasicUnitId == null)
            {
                await this.ToastObj.Show(new ToastModel { Title = "Error!", Content = "Please Choose the basic unit of measure!", CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
                Args.Cancel = true;
            }
        }
    }
    #endregion Order Details

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManagement userManagement { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Navigation { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PharmacyContext _context { get; set; }
    }
}
#pragma warning restore 1591
