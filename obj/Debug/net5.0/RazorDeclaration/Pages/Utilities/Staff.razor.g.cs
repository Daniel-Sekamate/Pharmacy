// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Pharmacy.Pages.Utilities
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
#nullable restore
#line 1 "D:\CoreProjects\Pharmacy\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Pharmacy;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Pharmacy.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\CoreProjects\Pharmacy\_Imports.razor"
using BlazorStrap;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Syncfusion.Blazor.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\CoreProjects\Pharmacy\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using Microsoft.Extensions.DependencyInjection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using Pharmacy.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using System.Collections;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
using Pharmacy.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/Utilities/Staff")]
    public partial class Staff : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 245 "D:\CoreProjects\Pharmacy\Pages\Utilities\Staff.razor"
       
    #region Toasters
    public static string ToastContent { get; set; }
    SfToast ToastObj;
    SfToast DeleteToastObj;
    private string ToastPosition = "Right";
    private int AlarmTimeout { get; set; } = 120000;
    private List<ToastModel> Toast = new List<ToastModel>
{
        new ToastModel{ Title = "Warning!", Content=ToastContent, CssClass="e-toast-warning", Icon="e-warning toast-icons" },
        new ToastModel{ Title = "Success!", Content=ToastContent, CssClass="e-toast-success", Icon="e-success toast-icons" },
        new ToastModel{ Title = "Error!", Content=ToastContent, CssClass="e-toast-danger", Icon="e-error toast-icons" },
        new ToastModel{ Title = "Information!", Content=ToastContent, CssClass="e-toast-info", Icon="e-info toast-icons" }
    };
    #endregion Toasters

    private SfGrid<AstaffRole> StaffRoleGrid;
    private SfGrid<AStaff> StaffGrid;
    public AStaff StaffData { get; set; }
    public Syncfusion.Blazor.Grids.Action PreviousAction;
    private List<AstaffRole> _staffRole { get; set; }
    private List<Agender> _gender { get; set; }
    private List<ACountry> _Country { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (!userManagement.IsSignedIn())
            {
                Navigation.NavigateTo("Account/LoginPage", true);
            }
            _staffRole = _context.AstaffRoles.ToList();
            _gender = _context.Agenders.ToList();
            _Country = _context.ACountries.ToList();
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }

    #region Staff Role DataSource
    public class StaffRoleAdapter : DataAdaptor
    {
        public IToastService toastService;
        public StaffRoleAdapter(IToastService ts)
        {
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AstaffRole>();
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.AstaffRoles.OrderBy(o => o.StaffRole).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AstaffRole>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    var val = (value as AstaffRole);
                    val.StaffRoleId = Guid.NewGuid().ToString();
                    dbContext.AstaffRoles.Add(val);
                    await dbContext.SaveChangesAsync();
                    toastService.ShowSuccess(val.StaffRole + " has been saved successfully.");
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                var val = (value as AstaffRole);
                using (var dbContext = new SPToCoreContext())
                {
                    // dbContext.AphysicalCount.Remove(dbContext.AphysicalCount.FirstOrDefault(o => o.PhysicalCountId == val.PhysicalCountId));
                    // await dbContext.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    var val = (value as AstaffRole);
                    var exist = dbContext.AstaffRoles.FirstOrDefault(o => o.StaffRoleId == val.StaffRoleId);
                    if (exist != null)
                    {
                        exist.StaffRole = val.StaffRole;

                        dbContext.Entry(exist).State = EntityState.Modified;
                        await dbContext.SaveChangesAsync();
                        toastService.ShowSuccess(val.StaffRole + " has been updated successfully.");
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            return value;
        }
    }
    public void OnStaffRoleActionBegin(ActionEventArgs<AstaffRole> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
        {

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
        {

        }
        //if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        //{
        //    this.OrderGrid.EndEdit();
        //}
    }
    #endregion Staff Role DataSource
    #region Staff DataSource
    public class StaffAdapter : DataAdaptor
    {
        public IToastService toastService;
        public StaffAdapter(IToastService ts)
        {
            toastService = ts;
        }
        public override async Task<Object> ReadAsync(DataManagerRequest dataManagerRequest, string key = null)
        {
            var data = new List<AStaff>();
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    data = await dbContext.AStaffs.OrderBy(o => o.StaffName).ToListAsync();
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            IEnumerable GridData = data;
            int _count = data.Count;
            if (dataManagerRequest.Search != null && dataManagerRequest.Search.Count > 0)
            {
                // Searching
                GridData = DataOperations.PerformSearching(GridData, dataManagerRequest.Search);
            }
            if (dataManagerRequest.Sorted?.Count > 0) // perform Sorting
            {
                GridData = DataOperations.PerformSorting(GridData, dataManagerRequest.Sorted);
            }
            if (dataManagerRequest.Skip != 0)
            {
                GridData = DataOperations.PerformSkip(GridData, dataManagerRequest.Skip); //Paging
            }
            if (dataManagerRequest.Take != 0)
            {
                GridData = DataOperations.PerformTake(GridData, dataManagerRequest.Take);
            }
            IDictionary<string, object> aggregates = new Dictionary<string, object>();
            if (dataManagerRequest.Aggregates != null) // Aggregation
            {
                aggregates = DataUtil.PerformAggregation(GridData, dataManagerRequest.Aggregates);
            }
            if (dataManagerRequest.Group != null && dataManagerRequest.Group.Any()) //Grouping
            {
                foreach (var group in dataManagerRequest.Group)
                {
                    GridData = DataUtil.Group<AStaff>(GridData, group, dataManagerRequest.Aggregates, 0, dataManagerRequest.GroupByFormatter);
                }
            }
            return dataManagerRequest.RequiresCounts ? new DataResult() { Result = GridData, Count = _count, Aggregates = aggregates } : (object)GridData;
        }
        public override async Task<Object> InsertAsync(DataManager dataManager, object value, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    var val = (value as AStaff);

                    var exist = dbContext.AStaffs.FirstOrDefault(o => o.StaffId == val.StaffId);
                    if (exist != null)
                    {
                        exist.StaffName = val.StaffName;
                        exist.StaffRoleId = val.StaffRoleId;
                        exist.GenderId = val.GenderId;
                        exist.Email = val.Email;
                        exist.Dob = val.Dob;
                        exist.NationalityId = val.NationalityId;
                        exist.Phone = val.Phone;
                        exist.Tele = val.Tele;
                        exist.City = val.City;
                        exist.Town = val.Town;
                        exist.NinNumber = val.NinNumber;
                        exist.IsActive = val.IsActive;
                        dbContext.Entry(exist).State = EntityState.Modified;
                    }
                    else
                    {
                        val.StaffId = Guid.NewGuid().ToString();
                        dbContext.AStaffs.Add(val);
                    }
                    await dbContext.SaveChangesAsync();
                    toastService.ShowSuccess(val.StaffName + " has been saved successfully.");
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }
            return value;
        }
        public override async Task<object> RemoveAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                int data = (int)value;
                var val = (value as AStaff);
                //using (var dbContext = new SPToCoreContext())
                //{
                //    dbContext.AphysicalCount.Remove(dbContext.AphysicalCount.FirstOrDefault(o => o.PhysicalCountId == val.PhysicalCountId));
                //    await dbContext.SaveChangesAsync();
                //}
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }


            return value;
        }
        public override async Task<object> UpdateAsync(DataManager dataManager, object value, string keyField, string key)
        {
            try
            {
                using (var dbContext = new SPToCoreContext())
                {
                    var val = (value as AStaff);
                    var exist = dbContext.AStaffs.FirstOrDefault(o => o.StaffId == val.StaffId);
                    if (exist != null)
                    {
                        exist.StaffName = val.StaffName;
                        exist.StaffRoleId = val.StaffRoleId;
                        exist.GenderId = val.GenderId;
                        exist.Email = val.Email;
                        exist.Dob = val.Dob;
                        exist.NationalityId = val.NationalityId;
                        exist.Phone = val.Phone;
                        exist.Tele = val.Tele;
                        exist.City = val.City;
                        exist.Town = val.Town;
                        exist.NinNumber = val.NinNumber;
                        exist.IsActive = val.IsActive;
                        dbContext.Entry(exist).State = EntityState.Modified;
                        await dbContext.SaveChangesAsync();
                    }

                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.ToString());
            }

            return value;
        }
    }
    public async void OnStaffActionBegin(ActionEventArgs<AStaff> args)
    {
        try
        {
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
            {
                PreviousAction = args.RequestType;
                _staffRole = _context.AstaffRoles.ToList();
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Add)
            {
                PreviousAction = args.RequestType;
                _staffRole = _context.AstaffRoles.ToList();
                args.RowData.StaffId = Guid.NewGuid().ToString();
                args.RowData.IsActive = true;
                using (var dbContext = new SPToCoreContext())
                {
                    dbContext.AStaffs.Add(args.RowData);
                    dbContext.SaveChanges();
                }
            }
            if (args.RequestType == Syncfusion.Blazor.Grids.Action.Cancel)
            {
                if (PreviousAction == Syncfusion.Blazor.Grids.Action.Add)
                {
                    using (var dbContext = new SPToCoreContext())
                    {
                        var exist = dbContext.AstaffImages.FirstOrDefault(o => o.StaffId == args.RowData.StaffId);
                        if (exist != null)
                        {
                            dbContext.AstaffImages.Remove(exist);
                            dbContext.SaveChanges();
                        }
                        dbContext.AStaffs.Remove(args.RowData);
                        dbContext.SaveChanges();
                    }
                }
            }
            //if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
            //{
            //    this.OrderGrid.EndEdit();
            //}
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    private async void OnFileUploadChange(UploadChangeEventArgs args)
    {
        try
        {
            foreach (var file in args.Files)
            {
                var path = hostingEnv.WebRootPath + $@"\StaffImages\{file.FileInfo.Name}";
                //var path = @"path" + file.FileInfo.Name;
                if (!System.IO.File.Exists(path))
                {
                    FileStream filestream = new FileStream(path, FileMode.Create, FileAccess.ReadWrite);
                    file.Stream.WriteTo(filestream);
                    filestream.Close();
                    file.Stream.Close();
                    FileStream fs = System.IO.File.Create(path);
                    BinaryReader br = new BinaryReader(fs); //reads the binary files
                    Byte[] bytes = br.ReadBytes((Int32)fs.Length); //counting the file length into bytes
                    using (var dbContext = new SPToCoreContext())
                    {
                        var exist = dbContext.AstaffImages.FirstOrDefault(o => o.StaffId == StaffData.StaffId);
                        if (exist != null)
                        {
                            exist.ImageName = file.FileInfo.Name;
                            exist.ImageType = Path.GetExtension(file.FileInfo.Name);
                            exist.StaffImage = bytes;
                            dbContext.Entry(exist).State = EntityState.Modified;
                        }
                        else
                        {
                            AstaffImage m = new AstaffImage();
                            m.StaffId = StaffData.StaffId;
                            m.ImageName = file.FileInfo.Name;
                            m.ImageType = Path.GetExtension(file.FileInfo.Name);
                            m.StaffImage = bytes;
                            dbContext.AstaffImages.Add(m);
                        }
                        dbContext.SaveChanges();
                    }
                }
                //Save infor into the DB
            }
        }
        catch (Exception ex)
        {
            await ToastObj.Show(new ToastModel { Title = "Error!", Content = ex.ToString(), CssClass = "e-toast-danger", Icon = "e-error toast-icons" });
        }
    }
    #endregion Staff DataSource

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private UserManagement userManagement { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager Navigation { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment hostingEnv { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PharmacyContext _context { get; set; }
    }
}
#pragma warning restore 1591
